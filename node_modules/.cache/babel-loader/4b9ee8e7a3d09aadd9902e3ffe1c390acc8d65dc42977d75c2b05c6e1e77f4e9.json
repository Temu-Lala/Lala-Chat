{"ast":null,"code":"const XMLHttpRequest = require(\"../../contrib/xmlhttprequest-ssl/XMLHttpRequest\");\nconst XHR = require(\"./polling-xhr\");\nconst JSONP = require(\"./polling-jsonp\");\nconst websocket = require(\"./websocket\");\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts) {\n  let xhr;\n  let xd = false;\n  let xs = false;\n  const jsonp = false !== opts.jsonp;\n  if (typeof location !== \"undefined\") {\n    const isSSL = \"https:\" === location.protocol;\n    let port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n  if (\"open\" in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error(\"JSONP disabled\");\n    return new JSONP(opts);\n  }\n}","map":{"version":3,"names":["XMLHttpRequest","require","XHR","JSONP","websocket","exports","polling","opts","xhr","xd","xs","jsonp","location","isSSL","protocol","port","hostname","secure","xdomain","xscheme","forceJSONP","Error"],"sources":["C:/Users/lala1/Desktop/my chat(copy)/Chatbase-master/node_modules/engine.io-client/lib/transports/index.js"],"sourcesContent":["const XMLHttpRequest = require(\"../../contrib/xmlhttprequest-ssl/XMLHttpRequest\");\nconst XHR = require(\"./polling-xhr\");\nconst JSONP = require(\"./polling-jsonp\");\nconst websocket = require(\"./websocket\");\n\nexports.polling = polling;\nexports.websocket = websocket;\n\n/**\n * Polling transport polymorphic constructor.\n * Decides on xhr vs jsonp based on feature detection.\n *\n * @api private\n */\n\nfunction polling(opts) {\n  let xhr;\n  let xd = false;\n  let xs = false;\n  const jsonp = false !== opts.jsonp;\n\n  if (typeof location !== \"undefined\") {\n    const isSSL = \"https:\" === location.protocol;\n    let port = location.port;\n\n    // some user agents have empty `location.port`\n    if (!port) {\n      port = isSSL ? 443 : 80;\n    }\n\n    xd = opts.hostname !== location.hostname || port !== opts.port;\n    xs = opts.secure !== isSSL;\n  }\n\n  opts.xdomain = xd;\n  opts.xscheme = xs;\n  xhr = new XMLHttpRequest(opts);\n\n  if (\"open\" in xhr && !opts.forceJSONP) {\n    return new XHR(opts);\n  } else {\n    if (!jsonp) throw new Error(\"JSONP disabled\");\n    return new JSONP(opts);\n  }\n}\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,iDAAiD,CAAC;AACjF,MAAMC,GAAG,GAAGD,OAAO,CAAC,eAAe,CAAC;AACpC,MAAME,KAAK,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AACxC,MAAMG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;AAExCI,OAAO,CAACC,OAAO,GAAGA,OAAO;AACzBD,OAAO,CAACD,SAAS,GAAGA,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,OAAOA,CAACC,IAAI,EAAE;EACrB,IAAIC,GAAG;EACP,IAAIC,EAAE,GAAG,KAAK;EACd,IAAIC,EAAE,GAAG,KAAK;EACd,MAAMC,KAAK,GAAG,KAAK,KAAKJ,IAAI,CAACI,KAAK;EAElC,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IACnC,MAAMC,KAAK,GAAG,QAAQ,KAAKD,QAAQ,CAACE,QAAQ;IAC5C,IAAIC,IAAI,GAAGH,QAAQ,CAACG,IAAI;;IAExB;IACA,IAAI,CAACA,IAAI,EAAE;MACTA,IAAI,GAAGF,KAAK,GAAG,GAAG,GAAG,EAAE;IACzB;IAEAJ,EAAE,GAAGF,IAAI,CAACS,QAAQ,KAAKJ,QAAQ,CAACI,QAAQ,IAAID,IAAI,KAAKR,IAAI,CAACQ,IAAI;IAC9DL,EAAE,GAAGH,IAAI,CAACU,MAAM,KAAKJ,KAAK;EAC5B;EAEAN,IAAI,CAACW,OAAO,GAAGT,EAAE;EACjBF,IAAI,CAACY,OAAO,GAAGT,EAAE;EACjBF,GAAG,GAAG,IAAIR,cAAc,CAACO,IAAI,CAAC;EAE9B,IAAI,MAAM,IAAIC,GAAG,IAAI,CAACD,IAAI,CAACa,UAAU,EAAE;IACrC,OAAO,IAAIlB,GAAG,CAACK,IAAI,CAAC;EACtB,CAAC,MAAM;IACL,IAAI,CAACI,KAAK,EAAE,MAAM,IAAIU,KAAK,CAAC,gBAAgB,CAAC;IAC7C,OAAO,IAAIlB,KAAK,CAACI,IAAI,CAAC;EACxB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}